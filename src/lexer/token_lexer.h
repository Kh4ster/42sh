/** @file
* @brief Data_structure of token used and returned by lexer
* @author Coder : pierrick.made
* @author Tester :
* @author Reviewer :
* @author Integrator :
*/

#pragma once

/** @enum token_lexer_type
* @brief Possible types of a token generated by the lexer
*/
enum token_lexer_type
{
    TOKEN_END_OF_INSTRUCTION, /**< @brief end of an instruction ";", "EOF" */
    TOKEN_END_OF_LINE, /**< @brief end of line "\n" */
    TOKEN_OTHER /**< @brief any words without delimiters */
};

/** @struct token_lexer
* @brief Define a token generated by the lexer
*/
struct token_lexer
{
    char *data; /**< @brief token content (char*) */
    enum token_lexer_type type; /**< @brief type of the token */
};

/**
* @brief Add all token_lexer found in line to token_queue
* @param line The line to be divided into tokens by the lexer
* @return success : token_queue, fail : NULL
* @relates token_lexer
*/
struct queue *lexer(char *line);

/**
* @brief Free the token struct and contained string
* @param token the token you want to free
* @relates token_lexer
*/
void free_token(struct token_lexer *token);